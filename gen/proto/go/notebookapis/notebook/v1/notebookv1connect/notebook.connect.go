// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notebookapis/notebook/v1/notebook.proto

package notebookv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jasonblanchard/di-notebook-connect/gen/proto/go/notebookapis/notebook/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotebookServiceName is the fully-qualified name of the NotebookService service.
	NotebookServiceName = "notebook.v1.NotebookService"
)

// NotebookServiceClient is a client for the notebook.v1.NotebookService service.
type NotebookServiceClient interface {
	GetAuthorEntry(context.Context, *connect_go.Request[v1.GetAuthorEntryRequest]) (*connect_go.Response[v1.GetAuthorEntryResponse], error)
	BeginNewEntry(context.Context, *connect_go.Request[v1.BeginNewEntryRequest]) (*connect_go.Response[v1.BeginNewEntryResponse], error)
	WriteToEntry(context.Context, *connect_go.Request[v1.WriteToEntryRequest]) (*connect_go.Response[v1.WriteToEntryResponse], error)
}

// NewNotebookServiceClient constructs a client for the notebook.v1.NotebookService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotebookServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotebookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notebookServiceClient{
		getAuthorEntry: connect_go.NewClient[v1.GetAuthorEntryRequest, v1.GetAuthorEntryResponse](
			httpClient,
			baseURL+"/notebook.v1.NotebookService/GetAuthorEntry",
			opts...,
		),
		beginNewEntry: connect_go.NewClient[v1.BeginNewEntryRequest, v1.BeginNewEntryResponse](
			httpClient,
			baseURL+"/notebook.v1.NotebookService/BeginNewEntry",
			opts...,
		),
		writeToEntry: connect_go.NewClient[v1.WriteToEntryRequest, v1.WriteToEntryResponse](
			httpClient,
			baseURL+"/notebook.v1.NotebookService/WriteToEntry",
			opts...,
		),
	}
}

// notebookServiceClient implements NotebookServiceClient.
type notebookServiceClient struct {
	getAuthorEntry *connect_go.Client[v1.GetAuthorEntryRequest, v1.GetAuthorEntryResponse]
	beginNewEntry  *connect_go.Client[v1.BeginNewEntryRequest, v1.BeginNewEntryResponse]
	writeToEntry   *connect_go.Client[v1.WriteToEntryRequest, v1.WriteToEntryResponse]
}

// GetAuthorEntry calls notebook.v1.NotebookService.GetAuthorEntry.
func (c *notebookServiceClient) GetAuthorEntry(ctx context.Context, req *connect_go.Request[v1.GetAuthorEntryRequest]) (*connect_go.Response[v1.GetAuthorEntryResponse], error) {
	return c.getAuthorEntry.CallUnary(ctx, req)
}

// BeginNewEntry calls notebook.v1.NotebookService.BeginNewEntry.
func (c *notebookServiceClient) BeginNewEntry(ctx context.Context, req *connect_go.Request[v1.BeginNewEntryRequest]) (*connect_go.Response[v1.BeginNewEntryResponse], error) {
	return c.beginNewEntry.CallUnary(ctx, req)
}

// WriteToEntry calls notebook.v1.NotebookService.WriteToEntry.
func (c *notebookServiceClient) WriteToEntry(ctx context.Context, req *connect_go.Request[v1.WriteToEntryRequest]) (*connect_go.Response[v1.WriteToEntryResponse], error) {
	return c.writeToEntry.CallUnary(ctx, req)
}

// NotebookServiceHandler is an implementation of the notebook.v1.NotebookService service.
type NotebookServiceHandler interface {
	GetAuthorEntry(context.Context, *connect_go.Request[v1.GetAuthorEntryRequest]) (*connect_go.Response[v1.GetAuthorEntryResponse], error)
	BeginNewEntry(context.Context, *connect_go.Request[v1.BeginNewEntryRequest]) (*connect_go.Response[v1.BeginNewEntryResponse], error)
	WriteToEntry(context.Context, *connect_go.Request[v1.WriteToEntryRequest]) (*connect_go.Response[v1.WriteToEntryResponse], error)
}

// NewNotebookServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotebookServiceHandler(svc NotebookServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/notebook.v1.NotebookService/GetAuthorEntry", connect_go.NewUnaryHandler(
		"/notebook.v1.NotebookService/GetAuthorEntry",
		svc.GetAuthorEntry,
		opts...,
	))
	mux.Handle("/notebook.v1.NotebookService/BeginNewEntry", connect_go.NewUnaryHandler(
		"/notebook.v1.NotebookService/BeginNewEntry",
		svc.BeginNewEntry,
		opts...,
	))
	mux.Handle("/notebook.v1.NotebookService/WriteToEntry", connect_go.NewUnaryHandler(
		"/notebook.v1.NotebookService/WriteToEntry",
		svc.WriteToEntry,
		opts...,
	))
	return "/notebook.v1.NotebookService/", mux
}

// UnimplementedNotebookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotebookServiceHandler struct{}

func (UnimplementedNotebookServiceHandler) GetAuthorEntry(context.Context, *connect_go.Request[v1.GetAuthorEntryRequest]) (*connect_go.Response[v1.GetAuthorEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notebook.v1.NotebookService.GetAuthorEntry is not implemented"))
}

func (UnimplementedNotebookServiceHandler) BeginNewEntry(context.Context, *connect_go.Request[v1.BeginNewEntryRequest]) (*connect_go.Response[v1.BeginNewEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notebook.v1.NotebookService.BeginNewEntry is not implemented"))
}

func (UnimplementedNotebookServiceHandler) WriteToEntry(context.Context, *connect_go.Request[v1.WriteToEntryRequest]) (*connect_go.Response[v1.WriteToEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notebook.v1.NotebookService.WriteToEntry is not implemented"))
}
