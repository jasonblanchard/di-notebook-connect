// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package notebook

import (
	"context"
	"database/sql"
	"time"
)

const countEntriesByAuthor = `-- name: CountEntriesByAuthor :one
SELECT
    count(*)
FROM entries 
WHERE
	creator_id = $1
	AND delete_time IS NULL
`

func (q *Queries) CountEntriesByAuthor(ctx context.Context, creatorID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEntriesByAuthor, creatorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEntriesByAuthorAfterCursor = `-- name: CountEntriesByAuthorAfterCursor :one
SELECT
    count(*)
FROM entries 
WHERE
	entries.creator_id = $1
	AND delete_time IS NULL
    AND id < CASE WHEN $2::int = 0 THEN
	(
		SELECT
			id
		FROM
			entries
		WHERE
			creator_id = $1
			AND delete_time IS NULL
		ORDER BY
			id DESC
		LIMIT 1)
		WHEN $2::int != 0 THEN $2::int
	END
`

type CountEntriesByAuthorAfterCursorParams struct {
	CreatorID string
	Cursor    int32
}

func (q *Queries) CountEntriesByAuthorAfterCursor(ctx context.Context, arg CountEntriesByAuthorAfterCursorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEntriesByAuthorAfterCursor, arg.CreatorID, arg.Cursor)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (text, creator_id, created_at)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateEntryParams struct {
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.Text, arg.CreatorID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEntryByIdAndAuthor = `-- name: DeleteEntryByIdAndAuthor :one
UPDATE entries
SET delete_time = $1
WHERE id = $2
AND creator_id = $3
RETURNING id, text, creator_id, created_at, updated_at, delete_time
`

type DeleteEntryByIdAndAuthorParams struct {
	DeleteTime sql.NullTime
	ID         int32
	CreatorID  string
}

func (q *Queries) DeleteEntryByIdAndAuthor(ctx context.Context, arg DeleteEntryByIdAndAuthorParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, deleteEntryByIdAndAuthor, arg.DeleteTime, arg.ID, arg.CreatorID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteTime,
	)
	return i, err
}

const getEntryByIdAndAuthor = `-- name: GetEntryByIdAndAuthor :one
SELECT id, text, creator_id, created_at, updated_at
FROM entries
WHERE id = $1 AND creator_id = $2
AND delete_time IS NULL
`

type GetEntryByIdAndAuthorParams struct {
	ID        int32
	CreatorID string
}

type GetEntryByIdAndAuthorRow struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) GetEntryByIdAndAuthor(ctx context.Context, arg GetEntryByIdAndAuthorParams) (GetEntryByIdAndAuthorRow, error) {
	row := q.db.QueryRowContext(ctx, getEntryByIdAndAuthor, arg.ID, arg.CreatorID)
	var i GetEntryByIdAndAuthorRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntriesByAuthor = `-- name: ListEntriesByAuthor :many
SELECT
	id, text, creator_id, created_at, updated_at, delete_time
FROM
	entries
WHERE
	entries.creator_id = $1
	AND entries.delete_time IS NULL
	AND entries.id <= CASE WHEN $3::int = 0 THEN
	(
		SELECT
			id
		FROM
			entries
		WHERE
			creator_id = $1
			AND delete_time IS NULL
		ORDER BY
			id DESC
		LIMIT 1)
		WHEN $3::int != 0 THEN $3::int - 1
	END
ORDER BY
	id DESC
LIMIT $2
`

type ListEntriesByAuthorParams struct {
	CreatorID string
	Limit     int32
	Cursor    int32
}

func (q *Queries) ListEntriesByAuthor(ctx context.Context, arg ListEntriesByAuthorParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByAuthor, arg.CreatorID, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unDeleteEntryByIdAndAuthor = `-- name: UnDeleteEntryByIdAndAuthor :one
UPDATE entries
SET delete_time = NULL
WHERE id = $1
AND creator_id = $2
RETURNING id, text, creator_id, created_at, updated_at, delete_time
`

type UnDeleteEntryByIdAndAuthorParams struct {
	ID        int32
	CreatorID string
}

func (q *Queries) UnDeleteEntryByIdAndAuthor(ctx context.Context, arg UnDeleteEntryByIdAndAuthorParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, unDeleteEntryByIdAndAuthor, arg.ID, arg.CreatorID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteTime,
	)
	return i, err
}

const updateEntryText = `-- name: UpdateEntryText :one
UPDATE entries
SET text = $1, updated_at = $2
WHERE id = $3
AND delete_time is null
RETURNING id, text, creator_id, created_at, updated_at
`

type UpdateEntryTextParams struct {
	Text      sql.NullString
	UpdatedAt sql.NullTime
	ID        int32
}

type UpdateEntryTextRow struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateEntryText(ctx context.Context, arg UpdateEntryTextParams) (UpdateEntryTextRow, error) {
	row := q.db.QueryRowContext(ctx, updateEntryText, arg.Text, arg.UpdatedAt, arg.ID)
	var i UpdateEntryTextRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
